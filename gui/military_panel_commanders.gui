# COPY-PASTED FOR NOW
@panel_width_minus_20 = 520			# used to be 450
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types MilitaryPanelCharacters {

	### MOBILIZATION CONTROLS
	type rank_icon = widget {
		block "icon_size" {
			size = { 34 34 }
		}
	
		# Background 
		icon = {
			size = { 100% 100% }
			texture = "gfx/interface/backgrounds/round_button_bg.dds"
		}

		# Rank
		icon = {
			size = { 75% 75% }
			parentanchor = center
			texture = "[Character.GetCommanderRank.GetTexture]"
			datacontext = "[Character]"
			datacontext = "[Character.GetCommanderRank]"
			tooltipwidget = {
				FancyTooltip_CommanderRank = {}
			}
		}
	}

	type morale_bar = white_progressbar_vertical {
		size = { 6 24 }

		blockoverride "values" {
			min = 0
			max = 1
			block "morale_value" {
			}
		}
		blockoverride "color" {
			block "morale_color" {
			}
		}
	}

	type commander_order_button = container {
		button_icon_round_map_interaction = {
			block "button_size" {
				size = { 60 60 }
			}
			tooltip = "COMMANDER_PANEL_ORDER_TOOLTIP"
			enabled = "[Character.CanSelectOrder( CommanderOrderType.Self )]"
			onclick = "[Character.SelectOrder( CommanderOrderType.Self )]"

			visible = "[Not(CommanderOrderType.HasMapInteraction)]"
			clicksound = "[CommanderOrderType.GetClickSound]"

			blockoverride "icon" {
				texture = "[CommanderOrderType.GetTexture]"
			}
			blockoverride "icon_size" {
				size = { 75% 75% }
			}
		}

		button_icon_round_map_interaction = {
			block "button_size" {
				size = { 60 60 }
			}
			tooltip = "COMMANDER_PANEL_ORDER_TOOLTIP"
			enabled = "[Character.CanSelectOrder( CommanderOrderType.Self )]"
			onclick = "[Character.SelectOrder( CommanderOrderType.Self )]"

			visible = "[CommanderOrderType.HasMapInteraction]"

			blockoverride "icon" {
				texture = "[CommanderOrderType.GetTexture]"
			}
			blockoverride "icon_size" {
				size = { 75% 75% }
			}
		}

		button_icon_round_action = {
			block "button_size" {
				size = { 60 60 }
			}
			tooltip = "COMMANDER_PANEL_ORDER_TOOLTIP"
			enabled = "[Character.CanSelectOrder( CommanderOrderType.Self )]"
			onclick = "[Character.SelectOrder( CommanderOrderType.Self )]"

			visible = "[CommanderOrderType.IsStandBy]"
			clicksound = "[CommanderOrderType.GetClickSound]"

			blockoverride "icon" {
				texture = "[CommanderOrderType.GetTexture]"
			}
			blockoverride "icon_size" {
				size = { 75% 75% }
			}
		}
	}

	### COMMANDER LIST
	type commander_list = flowcontainer {
		direction = vertical
		parentanchor = hcenter

		flowcontainer = {
			direction = vertical
			spacing = 5
			parentanchor = hcenter
			
			block "datamodel" {
				datamodel = "[Country.AccessGenerals]"
			}

			item = {
				container = {
					military_panel_commander_entry = {}
				}
			}
		}
	}
	
	### COMMANDER LIST ITEM 
	type military_panel_commander_entry = flowcontainer {
		minimumsize = { @panel_width 90 }
		parentanchor = hcenter
		direction = vertical

		# General info box
		flowcontainer = {
			minimumsize = { @panel_width -1 }
			maximumsize = { @panel_width -1 }
			direction = vertical
			spacing = 5
			margin_bottom = 14

			using = entry_bg_fancy
			
			# Name and info header
			container = {
				minimumsize = { @panel_width 35 }

				background = {
					using = fade_right_entry_fancy_header_colored
					color = "[Character.GetCountry.GetMapColor]"
				}
				
				flowcontainer = {
					position = { 12 0 }
					parentanchor = vcenter
					spacing = 5

					tiny_flag = {
						parentanchor = vcenter
					}

					textbox = {
						maximumsize = { 200 -1 }
						parentanchor = vcenter
						multiline = yes
						autoresize = yes
						text = "[Character.GetFullName]"
						align = left|nobaseline
						elide = right
						margin_left = 5
					}
				}

				# General status
				flowcontainer = {
					position = { -34 0 }
					parentanchor = right|vcenter

					textbox = {
						maximumsize = { 260 -1 }
						multiline = yes
						autoresize = yes
						margin = { 0 3 }
						text = "MILITARY_PANEL_COMMANDER_STATUS_FORMAT"
						align = nobaseline
						elide = right
						margin_right = 5
					}
				}

				# Zoom-to button
				widget = {
					position = { -6 6 }
					parentanchor = right
					size = { 28 28 }

					button_icon_zoom = {
						size = { 100% 100% }
						block "goto_properties" {
							onclick = "[Character.ZoomToOrderTarget]"
							tooltip = "ZOOM_TO_LOCATION"
						}
					}
				}
			}

			# Portrait
			container = {
				minimumsize = { @panel_width_minus_20 -1 }
				maximumsize = { @panel_width_minus_20 -1 }
				parentanchor = hcenter

				character_portrait_base_head = {
					position = { 3 0 }
					parentanchor = vcenter
					size = { 100 100 }

					blockoverride "portrait_size" {
						size = { 100 110 }
					}

					blockoverride "highlight" {}

				}

				# Traits
				flowcontainer = {
					position = { 110 0 }
					direction = vertical
					spacing = 10
					margin = { 2 2 }
					parentanchor = vcenter

					dynamicgridbox = {
						datamodel = "[Character.AccessTraits]"
						flipdirection = yes
						datamodel_wrap = 1
			
						item = {
							flowcontainer = {
								spacing = 10
								margin = { 0 2 }

								tooltipwidget = {
									FancyTooltip_CharacterTrait = {}
								}

								icon = {
									parentanchor = left|vcenter
									size = { 20 28 }
									texture = "[CharacterTrait.GetTexture]"
									using = tooltip_above
								}

								textbox = {
									parentanchor = vcenter
									text = "[CharacterTrait.GetNameNoFormatting]"
									maximumsize = { 150 64 }
									autoresize = yes
									align = left|nobaseline
									multiline = yes
								}
							}
						}
					}
				}

				# Mobilize this general button
				flowcontainer = {
					position = { 335 0 }
					parentanchor = vcenter
					spacing = 5
					margin = { 2 2 }
					visible = "[And(Character.IsGeneral, Not(Character.IsMobilized))]"
					enabled = "[IsValid( Character.Mobilize )]"
					
					button = {
						using = default_button_action
						using = commander_mobilize_button_sound
						size = { 160 40 }
						
						onclick = "[Execute( Character.Mobilize )]"
						tooltip = "MOBILIZE_GENERAL_TOOLTIP"

						mobilization_icon_big = {
							visible = yes
							parentanchor = left|vcenter
							widgetanchor = center
							size = { 50 50 }
						}

						textbox = {
							parentanchor = center
							text = "MOBILIZE_GENERAL"
							autoresize = yes
							align = nobaseline
						}
					}
				} 

				# General order buttons
				dynamicgridbox = {
					position = { 315 0 }
					parentanchor = vcenter
					visible = "[And(Character.IsGeneral, Character.IsMobilized)]"
					enabled = "[Not(Character.HasNavalInvasionPlan)]"
					datamodel = "[Character.AccessOrders]"
					datamodel_wrap = 3
					flipdirection = yes

					item = {
						flowcontainer = {
							margin = { 2 2 }
							widget = {
								size = { 60 60 }
								tooltip = "COMMANDER_PANEL_ORDER_TOOLTIP"
								using = tooltip_above

								icon = {
									using = rotate_glow_blue
									parentanchor = center
									size = { 90 90 }
									visible = "[Character.HasOrder( CommanderOrderType.Self )]"
								}

								commander_order_button = {
									
									blockoverride "button_selected" {
										visible = "[Character.HasOrder( CommanderOrderType.Self )]"
									}
								}
							}
						}
					}
				}

				# Admiral order buttons
				dynamicgridbox = {
					position = { 315 0 }
					parentanchor = vcenter
					layoutanchor = topright
					visible = "[Character.IsAdmiral]"
					datamodel = "[Character.AccessOrders]"
					datamodel_wrap = 3
					flipdirection = yes

					item = {
						flowcontainer = {
							margin = { 2 2 }
							widget = {
								size = { 60 60 }
								tooltip = "COMMANDER_PANEL_ORDER_TOOLTIP"
								using = tooltip_above

								icon = {
									using = rotate_glow_blue
									parentanchor = center
									size = { 90 90 }
									visible = "[Character.HasOrder( CommanderOrderType.Self )]"
								}

								commander_order_button = {
									visible = "[Character.HasOrder( CommanderOrderType.Self )]"

									blockoverride "button_selected" {
										visible = yes
									}
								}

								commander_order_button = {
									visible = "[Not(Character.HasOrder( CommanderOrderType.Self ))]"
									
									blockoverride "button_selected" {
										visible = no
									}
								}
							}
						}
					}
				}

				# pin button
				widget = {
					size = { 30 30 }
					parentanchor = top|left

					button_icon_round_toggle = {
						name = "commander_pin_button"
						using = check_button_sound
						size = { 100% 100% }
						parentanchor = center

						blockoverride "icon_1" {
							texture = "gfx/interface/outliner/unpinned_icon.dds"
						}

						blockoverride "view_1" {
							visible = "[Not(Character.IsPinnedInOutliner)]"
						}

						blockoverride "tooltip_1" {
							tooltip = "PIN"
						}

						blockoverride "icon_2" {
							texture = "gfx/interface/outliner/pinned_icon.dds"
						}

						blockoverride "view_2" {
							visible = "[Character.IsPinnedInOutliner]"
						}

						blockoverride "tooltip_2" {
							tooltip = "UNPIN"
						}

						blockoverride "on_click" {
							onclick = "[Character.TogglePinInOutliner]"
						}
						
						blockoverride "wood_texture" {
							texture = "gfx/interface/buttons/round_button_small_wood_action.dds"
						}

						blockoverride "frame_visible" {}
					}
				}
			}
			
			# BATTALIONS / WARSHIPS
			section_header_button = {
				parentanchor = hcenter
				size = { 95% 38 }
			
				visible = "[GreaterThan_int32(Character.GetNumCombatUnits, '(int32)0')]"
				enabled = "[And( Not( Character.IsOffer ), Not(IsDataModelEmpty( Character.GetCombatUnits )))]"
				
				blockoverride "onclick" {
					onclick = "[GetVariableSystem.Toggle( Concatenate( 'combat_units_', Character.GetIDString ) )]"
				}

				blockoverride "onclick_showmore" {
					visible = "[Not(GetVariableSystem.Exists( Concatenate( 'combat_units_', Character.GetIDString ) ))]"
				}

				blockoverride "onclick_showless" {
					visible = "[GetVariableSystem.Exists( Concatenate( 'combat_units_', Character.GetIDString ) )]"
				}

				flowcontainer = {
					parentanchor = vcenter
					margin_left = 35
					spacing = 10

					textbox = {
						visible = "[And(Character.IsFullyMobilized, Character.IsGeneral)]"
						parentanchor = vcenter
						elide = right
						align = left|nobaseline
						autoresize = yes

						text = "MILITARY_PANEL_MOBILIZED"
						tooltip = "GENERAL_IS_MOBILIZED_TOOLTIP"
					}

					textbox = {
						visible = "[And(Character.IsMobilizing, Character.IsGeneral)]" 
						parentanchor = vcenter
						elide = right
						align = left|nobaseline
						autoresize = yes

						text = "[Character.GetMobilizationPercentageFormatted]"
						tooltip = "GENERAL_MOBILIZING_TOOLTIP"
					}

					textbox = {
						visible = "[And(Not(Character.IsMobilized), Character.IsGeneral)]"
						parentanchor = vcenter
						elide = right
						align = left|nobaseline
						autoresize = yes

						text = "GARRISONED_CONCEPT"
					}
				}

				flowcontainer = {
					parentanchor = right|vcenter
					spacing = 10

					textbox = {
						visible = "[Character.HasShippingLane]"
						parentanchor = vcenter
						elide = right
						align = right|nobaseline
						autoresize = yes

						text = "[Character.GetShippingLane.GetConvoyCostFormattedShort]"
					}

					# Attrition
					textbox = {
						visible = "[Or(Character.IsMobilized, NotEqualTo_CFixedPoint(Character.GetAttritionRaw,'(CFixedPoint)0'))]"
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						text = "MILITARY_PANEL_TROOP_ATTRITION_LEVEL"
						tooltip = "[Character.GetAttritionDesc]"
					}

					# Units
					textbox = {
						visible = "[Character.IsMobilized]"
						parentanchor = vcenter
						elide = right
						align = right|nobaseline
						autoresize = yes
						text = "MILITARY_PANEL_COMMANDER_UNITS"
					}
					textbox = {
						visible = "[Not(Character.IsMobilized)]"
						parentanchor = vcenter
						elide = right
						align = right|nobaseline
						autoresize = yes
						text = "MILITARY_PANEL_COMMANDER_UNITS_UNMOBILIZED"
					}

					# Morale
					morale_bar = {
						size = { 6 24 }
						parentanchor = vcenter
						tooltip = "COMMANDER_MORALE_TOOLTIP"
						
						blockoverride "morale_value" {
							value = "[FixedPointToFloat( Character.GetMorale )]"
						}
						blockoverride "morale_color" {
							color = "[GetMoraleColorVec( Character.GetMorale )]"
						}
					}
				}
			}

			### MANPOWER PACKAGES
			flowcontainer = {
				parentanchor = hcenter
				direction = vertical
				minimumsize = { @panel_width_minus_10 -1 }
				maximumsize = { @panel_width_minus_10 -1 }
				margin = { 0 6 }

				visible = "[And( GetVariableSystem.Exists( Concatenate( 'combat_units_', Character.GetIDString ) ), Not( Character.IsOffer ))]"

				background = {
					using = dark_area
				}
			
				dynamicgridbox = {
					datamodel = "[Character.AccessExpandedBuildingEntries]"

					datamodel_wrap = 1
					flipdirection = yes
					parentanchor = hcenter

					item = {
						flowcontainer = {
							margin_bottom = 5

							combat_unit_building = {
								blockoverride "datacontext" {
									datacontext = "[MilitaryPanelBuildingEntry.GetBuilding]"
								}

								#TODO PRCAL-16920: Add toggles for building expand units
								blockoverride "onclick" {
									onclick = "[MilitaryPanelBuildingEntry.ToggleExpand]"
								}
								
								blockoverride "onclick_showmore" {
									visible = "[Not(MilitaryPanelBuildingEntry.IsExpanded)]"
								}
								
								blockoverride "onclick_showless" {
									visible = "[MilitaryPanelBuildingEntry.IsExpanded]"
								}

								blockoverride "combat_units_visible" {
									visible = "[MilitaryPanelBuildingEntry.IsExpanded]"
								}

								blockoverride "units_datamodel" {
									datamodel = "[Character.GetCombatUnitsFromBuilding(Building.Self)]"
								}
							}
						}
					}
				}
			}
		}
	}

	type commander_entry_building = flowcontainer {
		direction = vertical
		parentanchor = hcenter
		spacing = 10
		margin_bottom = 15
		
		using = entry_bg_fancy

		### Commander header
		container = {
			minimumsize = { @panel_width -1 }

			background = {
				using = fade_right_entry_fancy_header_colored
				color = "[Character.GetCountry.GetMapColor]"
			}

			icon = {
				visible = "[Character.IsBeingHighlighted]"
				using = highlighted_square_selection
			}

			### Portrait and name
			flowcontainer = {
				margin_left = 5
				parentanchor = left|vcenter
				button = {
					size = { 100% 100% }
					onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
					onrightclick = "[RightClickMenuManager.ShowForCharacter(Character.AccessSelf)]"
					onmousehierarchyenter = "[AccessHighlightManager.HighlightCharacter( Character.Self )]"
					onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
				}

				character_portrait_small = {
					parentanchor = vcenter
					using = tooltip_above
					blockoverride "portrait_button" {
						alwaystransparent = yes
					}
					blockoverride "is_selected" {
						visible = "[Character.IsBeingHighlighted]"
					}
				}
		
				textbox = {
					maximumsize = { 200 -1 }
					parentanchor = vcenter
					multiline = yes
					autoresize = yes
					text = "[Character.GetFullName]"
					align = left|nobaseline
					elide = right
					margin_left = 5
				}
			}
	
			### Order and location
			flowcontainer = {
				parentanchor = right|vcenter
				margin_right = 5

				textbox = {
					parentanchor = vcenter
					align = right|nobaseline
					maximumsize = { 260 -1 }
					multiline = yes
					autoresize = yes
					margin = { 0 3 }
					text = "MILITARY_PANEL_COMMANDER_STATUS_FORMAT"
					#text = "#todo Status"
					elide = right
					margin_right = 5
				}

				widget = {
					size = { 28 28 }
					parentanchor = vcenter

					button_icon_zoom = {
						size = { 100% 100% }
						blockoverride "goto_properties" {
							#TODO PRCAL-16920: Goto location
						}
					}
				}
			}
		}

		# Holds "onclick_" blocks
		section_header_button = {
			parentanchor = hcenter
			size = { 95% 38 }
		
			visible = "[GreaterThan_int32(Character.GetNumCombatUnits, '(int32)0')]"
			
			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle( Concatenate( 'combat_units_', Character.GetIDString ) )]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists( Concatenate( 'combat_units_', Character.GetIDString ) ))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists( Concatenate( 'combat_units_', Character.GetIDString ) )]"
			}

			flowcontainer = {
				parentanchor = vcenter
				margin_left = 35
				spacing = 10

				textbox = {
					visible = "[Character.IsMobilized]"
					parentanchor = vcenter
					elide = right
					align = left|nobaseline
					autoresize = yes

					text = "MILITARY_PANEL_MOBILIZED"
					tooltip = "GENERAL_IS_MOBILIZED_TOOLTIP"
				}

				textbox = {
					visible = "[Not(Character.IsMobilized)]"
					parentanchor = vcenter
					elide = right
					align = left|nobaseline
					autoresize = yes

					text = "GARRISONED"
				}
			}

			flowcontainer = {
				parentanchor = right|vcenter
				spacing = 10

				# Units
				textbox = {
					parentanchor = vcenter
					elide = right
					align = right|nobaseline
					autoresize = yes
					text = "BUILDING_PANEL_COMMANDER_UNITS"
				}
			}
		}

		flowcontainer = {
			visible = "[And( GetVariableSystem.Exists( Concatenate( 'combat_units_', Character.GetIDString ) ), Building.GetBuildingType.RecruitsCombatUnits )]"
			minimumsize = { 506 -1 }
			maximumsize = { 506 -1 }
			direction = vertical
			parentanchor = hcenter 
			margin = { 0 2 }

			background = {
				margin = { 4 0 }
				margin_top = 10
				using = dark_area
			}

			combat_unit_simple_grid = {
				datamodel = "[Character.GetCombatUnitsFromBuilding(Building.Self)]"
			}
		}
	}
}