# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width_minus_20 = 520
@panel_width_minus_30 = 510
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types sea_region_panel_types
{
	type sea_region_panel = default_block_window_vbox {
		name = "sea_region_panel"
		datacontext = "[SeaRegionPanel.AccessProvince]"
		
		blockoverride "window_header_name"
		{
			text = "#BOLD [Province.GetStateRegion.GetName]#!"
		}

		### TOP PART
		blockoverride "fixed_top"
		{
			top_illu = {
				datacontext = "[GetPlayer]"

				blockoverride "illu" {
					texture = "gfx/interface/illustrations/top_illus/top_illu_searoutes.dds"
				}

				textbox = {
					visible = "[And(Not(Country.HasDamagedConvoys), GetMetaPlayer.GetPlayedOrObservedCountry.IsValid)]"
					parentanchor = center
					using = fontsize_mega
					autoresize = yes
					align = center|nobaseline
					text = "NUM_CONVOYS_NO_DAMAGE_NUMBER"
					tooltip = "NUM_CONVOYS_TOOLTIP_EXTENDED"
				}

				textbox = {
					visible = "[Not(GetMetaPlayer.GetPlayedOrObservedCountry.IsValid)]"
					parentanchor = center
					using = fontsize_mega
					autoresize = yes
					align = center|nobaseline
					text = "@convoys!#todo 0#!"
					tooltip = "OBSERVER_NO_COUNTRY_SELECTED_TOOLTIP"
				}
			}

			#TABS
			tab_buttons = {
				blockoverride "first_button" {
					text = "SHIPPING_LANES"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanel.SelectTab('shipping_lanes')]"
				}
				blockoverride "first_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('shipping_lanes')]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('shipping_lanes') )]"
				}
				blockoverride "first_button_selected" {
					text = "SHIPPING_LANES"
				}
				blockoverride "first_button_name" {
					name = "tutorial_highlight_shipping_lanes_tab"
				}

				blockoverride "second_button" {
					text = "NAVY"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanel.SelectTab('navy')]"
				}
				blockoverride "second_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('navy')]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('navy') )]"
				}
				blockoverride "second_button_selected" {
					text = "NAVY"
				}
				blockoverride "second_button_name" {
					name = "tutorial_highlight_sea_node_navy_tab"
				}
			}
		}
		
		blockoverride "scrollarea_content_vbox" {

			vbox = {
				layoutpolicy_horizontal = preferred
				visible = "[InformationPanel.IsTabSelected('shipping_lanes')]"
				using = default_content_fade
				spacing = 10
				margin_top = 15

				textbox = {
					margin_top = 100
					layoutpolicy_vertical = preferred
					visible = "[IsDataModelEmpty(SeaRegionPanel.AccessCountriesWithShippingLanes)]"
					autoresize = yes
					align = center|nobaseline
					using = fontsize_xxl
					text = "NO_SUPPLY_NETWORK"
					using = empty_state_text_properties
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					spacing = 15

					datamodel = "[SeaRegionPanel.AccessCountriesWithShippingLanes]"

					item = {
						country_shipping_lanes = {}
					}
				}

				expand = {}
			}

			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('navy')]"
				using = default_content_fade
				direction = vertical

				flowcontainer = {
					using = default_list_position
					direction = vertical

					default_header = {
						parentanchor = hcenter
						blockoverride "text"
						{
							text = "SEA_REGION_PANEL_CONVOY_RAIDERS"
						}
					}

					widget = { size = { 5 5 }}

					empty_state = {
						parentanchor = hcenter
						blockoverride "visible" {
							visible = "[IsDataModelEmpty(SeaRegionPanel.AccessConvoyRaidingAdmirals)]"
						}
						blockoverride "text" {
							text = "NO_CONVOY_RAIDING_ADMIRALS"
						}
					}

					dynamicgridbox = {
						visible = "[Not(IsDataModelEmpty(SeaRegionPanel.AccessConvoyRaidingAdmirals))]"
						datamodel = "[SeaRegionPanel.AccessConvoyRaidingAdmirals]"
						parentanchor = hcenter
						datamodel_wrap = 5
						flipdirection = yes

						item = {
							commander_button = {
								onmousehierarchyenter = "[AccessHighlightManager.HighlightCharacter( Character.Self )]"
								onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
								alwaystransparent = no

								blockoverride "clickable_or_not" {
									using = default_button
								}
							}
						}
					}

					widget = { size = { 10 10 }}

					default_header = {
						parentanchor = hcenter
						blockoverride "text"
						{
							text = "SEA_REGION_PANEL_INTERCEPTING_ADMIRALS"
						}
					}

					widget = { size = { 5 5 }}

					empty_state = {
						parentanchor = hcenter
						blockoverride "visible" {
							visible = "[IsDataModelEmpty(SeaRegionPanel.AccessInterceptingAdmirals)]"
						}
						blockoverride "text" {
							text = "NO_INTERCEPTING_ADMIRALS"
						}
					}

					dynamicgridbox = {
						visible = "[Not(IsDataModelEmpty(SeaRegionPanel.AccessInterceptingAdmirals))]"
						datamodel = "[SeaRegionPanel.AccessInterceptingAdmirals]"
						parentanchor = hcenter
						datamodel_wrap = 5
						flipdirection = yes

						item = {
							commander_button = {
								onmousehierarchyenter = "[AccessHighlightManager.HighlightCharacter( Character.Self )]"
								onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
								alwaystransparent = no

								blockoverride "clickable_or_not" {
									using = default_button
								}
							}
						}
					}

					widget = { size = { 10 10 }}

					textbox = {
						visible = no
						parentanchor = hcenter
						autoresize = yes
						align = nobaseline
						text = "SEA_REGION_PANEL_ADMIRAL_DELAY"
						margin_left = 10
					}

					textbox = {
						visible = no
						parentanchor = hcenter
						autoresize = yes
						align = nobaseline
						text = "SEA_REGION_PANEL_INTERCEPTION_CHANCE"
						margin_left = 10
					}

					widget = { size = { 10 10 }}
				}

				flowcontainer = {
					using = default_list_position
					direction = vertical

					default_header = {
						parentanchor = hcenter
						blockoverride "text"
						{
							text = "ACTIVE_SEA_BATTLES_HEADER"
						}
					}

					widget = { size = { 5 5 } }

					dynamicgridbox = {
						visible = "[Not(IsDataModelEmpty(SeaRegionPanel.AccessActiveBattles))]"
						datamodel = "[SeaRegionPanel.AccessActiveBattles]"
						parentanchor = hcenter
						item = {
							battle_item = {}
						}
					}

					empty_state = {
						parentanchor = hcenter
						blockoverride "visible" {
							visible = "[IsDataModelEmpty(SeaRegionPanel.AccessActiveBattles)]"
						}
						blockoverride "text" {
							text = "NO_ACTIVE_SEA_BATTLES"
						}
					}

					widget = { size = { 5 5 } }
				}

				flowcontainer = {
					using = default_list_position
					direction = vertical

					default_header = {
						parentanchor = hcenter

						blockoverride "text"
						{
							text = "ENDED_SEA_BATTLES_HEADER"
						}
					}

					widget = { size = { 5 5 } }

					
					dynamicgridbox = {
						visible = "[Not(IsDataModelEmpty(SeaRegionPanel.AccessEndedBattles))]"
						datamodel = "[SeaRegionPanel.AccessEndedBattles]"
						parentanchor = hcenter
						item = {
							ended_battle_item = {}
						}
					}

					empty_state = {
						parentanchor = hcenter
						blockoverride "visible" {
							visible = "[IsDataModelEmpty(SeaRegionPanel.AccessEndedBattles)]"
						}
						blockoverride "text" {
							text = "NO_ENDED_SEA_BATTLES"
						}
					}

					widget = { size = { 5 5 } }
				}
			}

			expand = {}
		}
	}

	type country_shipping_lanes = vbox {
		layoutpolicy_horizontal = expanding
		spacing = 5

		margin_bottom = 10

		max_width = 540

		onmousehierarchyenter = "[AccessHighlightManager.HighlightSupplyNetwork(Country.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

		visible = "[Not(IsDataModelEmpty(Country.AccessShippingOriginStates(SeaRegionPanel.GetProvince.Self)))]"

		using = entry_bg_fancy

		background = {
			using = fade_right_entry_fancy_header_colored
			color = "[Country.GetMapColor]"
		}

		hbox = {
			layoutpolicy_vertical = preferred
			layoutpolicy_horizontal = expanding
			margin = { 10 10 }
			spacing = 10

			background = {
				using = fade_right_entry_fancy_header_colored
				color = "[Country.GetMapColor]"
			}

			small_flag = {
				blockoverride "frame_button" {}
			}

			textbox = {
				layoutpolicy_horizontal = expanding
				align = left|nobaseline
				autoresize = yes
				using = fontsize_xl
				text = "COUNTRY_SHIPPING_LANES"
			}

			textbox = {
				visible = "[LessThan_CFixedPoint(Country.GetSupplyNetworkStrength,'(CFixedPoint)1')]"
				margin_right = 10
				align = right|nobaseline
				autoresize = yes
				using = fontsize_xl
				text = "COUNTRY_SHIPPING_LANES_NETWORK_STRENGTH"
				tooltip = "SUPPLY_NETWORK_STRENGTH_TOOLTIP"
			}
		}

		datamodel = "[Country.AccessShippingOriginStates(SeaRegionPanel.GetProvince.Self)]"
		item = {
			origin_state_port = {}
		}
	}

	type origin_state_port = vbox {
		visible = "[Not(IsDataModelEmpty(State.AccessShippingLanesFromThisState))]"

		layoutpolicy_vertical = preferred
		layoutpolicy_horizontal = preferred
		max_width = 520

		margin_bottom = 3


		background = {
			using = dark_area
			alpha = 0.4

			modify_texture = {
				texture = "gfx/interface/masks/fade_horizontal_right.dds"
				blend_mode = alphamultiply
				alpha = 1
			}
		}

		background = {
			using = simple_frame
		}


		hbox = {

			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = expanding
			margin_bottom = 5
			margin_top = 10
			spacing = 5

			textbox = {
				layoutpolicy_vertical = expanding
				margin_left = 15
				elide = right
				align = left|nobaseline
				using = fontsize_large
				autoresize = yes

				text = "ORIGIN_STATE_NAME"
			}

			textbox = {
				layoutpolicy_vertical = expanding
				align = left|nobaseline
				using = fontsize_large
				autoresize = yes

				tooltip = "ORIGIN_STATE_NUMBER_OF_SHIPPING_LANES_TOOLTIP"
				text = "ORIGIN_STATE_NUMBER_OF_SHIPPING_LANES"
			}

			expand = {}

			textbox = {
				datacontext = "[State]"
				margin_right = 15
				elide = right
				align = right|nobaseline
				autoresize = yes
				tooltip = "ORIGIN_STATE_TOTAL_CONVOYS_USED_TOOLTIP"
				text = "ORIGIN_STATE_TOTAL_CONVOYS_USED"
			}
		}

		section_header_button = {
			blockoverride "layout" {
				layoutpolicy_horizontal = expanding
				max_width = 520
				size = { 0 40 }
			}

			blockoverride "background" {
				using = expand_button_bg
			}

			blockoverride "arrow_position" {
				position = { 10 0 }
				parentanchor = left|vcenter
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle( Concatenate( 'sea_panel_origin_state_', State.GetIDString ) )]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists( Concatenate( 'sea_panel_origin_state_', State.GetIDString ) ))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists( Concatenate( 'sea_panel_origin_state_', State.GetIDString ) )]"
			}

			vbox = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = expanding

				hbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding

					hbox = {
						visible = "[GreaterThan_int32(State.GetTotalPortConnectionsViaState, '(int32)0')]"
						margin_left = 45
						spacing = 5

						overlappingitembox = {
							datamodel = "[State.AccessShippingLanesFromThisState]"
							maximumsize = { 300 30 }
							autoresize = yes
						
							item = {
								shipping_lane_icon = {}
							}
						}
					}

					hbox = {
						visible = "[Not(GreaterThan_int32(State.GetTotalPortConnectionsViaState, '(int32)0'))]"
						margin_left = 45
						spacing = 5

						overlappingitembox = {
							datamodel = "[State.AccessShippingLanesFromThisState]"
							maximumsize = { 470 30 }
							autoresize = yes
						
							item = {
								shipping_lane_icon = {}
							}
						}
					}

					expand = {}

					textbox = {
						layoutpolicy_horizontal = preferred
						visible = "[GreaterThan_int32(State.GetTotalPortConnectionsViaState, '(int32)0')]"
						margin_right = 10
						elide = right
						align = right|nobaseline
						autoresize = yes

						text = "ORIGIN_STATE_TOTAL_NUMBER_OF_PORT_CONNECTIONS"
					}

				}
			}
		}

		vbox = {
			layoutpolicy_vertical = preferred
			visible = "[GetVariableSystem.Exists( Concatenate( 'sea_panel_origin_state_', State.GetIDString ) )]"
			using = default_content_fade

			background = {
				using = dropdown_background
			}

			datamodel = "[State.AccessShippingLanesFromThisState]"
			item = {
				shipping_lane_state_item = {}
			}
		}
	}

	type shipping_lane_state_item = vbox {
		layoutpolicy_vertical = preferred
		layoutpolicy_horizontal = preferred

		divider_clean = {
			size = { 510 1 }
		}

		### Trade Route
		hbox = {
			margin = { 10 0 }
			spacing = 5
			visible = "[ShippingLane.IsTradeRoute]"
			datacontext = "[ShippingLane.GetTradeRoute]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			icon = {
				visible = "[TradeRoute.IsExport]"
				size = { 35 35 }
				texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
			}

			icon = {
				visible = "[TradeRoute.IsImport]"
				size = { 35 35 }
				texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
			}

			textbox = {
				layoutstretchfactor_horizontal = 4
				layoutpolicy_horizontal = expanding
				elide = right
				fontsize_min = 12
				align = right|nobaseline
				text = "SHIPPING_LANE_NUMBER_GOODS_TRADED"
			}

			textbox = {
				layoutstretchfactor_horizontal = 7
				layoutpolicy_horizontal = expanding
				elide = right
				fontsize_min = 12
				align = left|nobaseline
				text = "SHIPPING_LANE_GOODS_TRADED"
			}

			textbox = {
				layoutstretchfactor_horizontal = 10
				layoutpolicy_horizontal = expanding
				align = left|nobaseline
				elide = right
				fontsize_min = 12
				text = "SHIPPING_LANE_END_STATE"
			}

			tiny_flag = {
				datacontext = "[ShippingLane.GetEndState.GetCountry]"
			}

			textbox = {
				layoutstretchfactor_horizontal = 3.5
				layoutpolicy_horizontal = expanding
				alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(ShippingLane.GetEffectivenessRaw,'(CFixedPoint)1'))]"
				align = right|nobaseline
				elide = right
				text = "[ShippingLane.GetEffectivenessFormatted]"
			}

			textbox = {
				layoutstretchfactor_horizontal = 4
				layoutpolicy_horizontal = expanding
				elide = right
				align = right|nobaseline
				fontsize_min = 12
				text = "[ShippingLane.GetConvoyCostFormattedShort]"
			}
		}

		### Supply Route
		hbox = {
			minimumsize = { -1 35 }
			margin = { 10 0 }
			spacing = 5
			layoutpolicy_vertical = expanding 
			layoutpolicy_horizontal = expanding

			visible = "[ShippingLane.IsSupplyRoute]"
			datacontext = "[ShippingLane.GetCharacter]"

			character_portrait_mini = {
				min_width = 35
				max_width = 35
			}

			textbox = {
				layoutstretchfactor_horizontal = 7
				layoutpolicy_horizontal = expanding
				align = left|nobaseline
				elide = right
				fontsize_min = 12
				text = "[Character.GetFullName]"
			}

			widget = {
				layoutstretchfactor_horizontal = 4
				layoutpolicy_horizontal = expanding
				size = { 5 5 }
			}


			textbox = {
				layoutstretchfactor_horizontal = 10
				layoutpolicy_horizontal = expanding
				align = left|nobaseline
				elide = right
				fontsize_min = 12
				text = "SHIPPING_LANE_SUPPLIED_STATE"
			}

			tiny_flag = {
				datacontext = "[ShippingLane.GetEndState.GetCountry]"
			}

			textbox = {
				layoutstretchfactor_horizontal = 3.5
				layoutpolicy_horizontal = expanding
				alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(ShippingLane.GetEffectivenessRaw,'(CFixedPoint)1'))]"
				align = right|nobaseline
				elide = right
				text = "[ShippingLane.GetEffectivenessFormatted]"
			}

			textbox = {
				layoutstretchfactor_horizontal = 4
				layoutpolicy_horizontal = expanding
				align = right|nobaseline
				elide = right
				fontsize_min = 12
				text = "[ShippingLane.GetConvoyCostFormattedShort]"
			}
		}

		### Port Connection
		hbox = {
			minimumsize = { -1 35 }
			margin = { 10 0 }
			spacing = 5
			layoutpolicy_vertical = expanding 
			layoutpolicy_horizontal = expanding

			visible = "[ShippingLane.IsPortConnection]"

			textbox = {
				layoutstretchfactor_horizontal = 7
				layoutpolicy_horizontal = expanding
				align = left|nobaseline
				elide = right
				fontsize_min = 12
				text = "PORT_CONNECTION"
			}

			widget = {
				layoutstretchfactor_horizontal = 4
				layoutpolicy_horizontal = expanding
				size = { 5 5 }
			}


			widget = {
				size = { 35 0 }
			}

			textbox = {
				layoutstretchfactor_horizontal = 10
				layoutpolicy_horizontal = expanding
				align = left|nobaseline
				elide = right
				fontsize_min = 12
				text = "SHIPPING_LANE_SUPPLIED_STATE"
			}

			tiny_flag = {
				datacontext = "[ShippingLane.GetEndState.GetCountry]"
			}

			textbox = {
				layoutstretchfactor_horizontal = 3.5
				layoutpolicy_horizontal = expanding
				alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(ShippingLane.GetEffectivenessRaw,'(CFixedPoint)1'))]"
				align = right|nobaseline
				elide = right
				text = "[ShippingLane.GetEffectivenessFormatted]"
			}

			textbox = {
				layoutstretchfactor_horizontal = 4
				layoutpolicy_horizontal = expanding
				align = right|nobaseline
				elide = right
				fontsize_min = 12
				text = "[ShippingLane.GetConvoyCostFormattedShort]"
			}
		}
	}

	type shipping_lane_icon = widget {
		visible = "[Not(ShippingLane.IsPortConnection)]"

		size = { 30 30 }

		icon = {
			visible = "[ShippingLane.IsTradeRoute]"
			datacontext = "[ShippingLane.GetTradeRoute.GetGoods]"

			tooltipwidget = {
				FancyTooltip_Goods = {}
			}
			parentanchor = center
			size = { 100% 100% }
			texture = "[Goods.GetTexture]"
		}

		character_portrait_mini = {
			visible = "[ShippingLane.IsSupplyRoute]"
			parentanchor = center
			datacontext = "[ShippingLane.GetCharacter]"
		}
	}
}
